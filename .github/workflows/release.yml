name: Release and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'package.json' # Only applies to pushes to branches

jobs:
  # Job 1: Check version and create a new tag (only for main branch pushes)
  tag_version:
    if: startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permission to push tags
    outputs:
      tag_name: ${{ steps.check_version.outputs.tag_name }}
      should_release: ${{ steps.check_version.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version and check for existing tag
        id: check_version
        run: |
          VERSION=$(jq -r .version package.json)
          TAG_NAME="v$VERSION"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists. No action needed."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG_NAME does not exist. Proceeding."
            echo "should_release=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and push new tag
        if: steps.check_version.outputs.should_release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.check_version.outputs.tag_name }}
          git push origin ${{ steps.check_version.outputs.tag_name }}

  # Job 2: Build, publish, and create release
  publish_release:
    runs-on: ubuntu-latest
    needs: tag_version # Depends on the first job to get its outputs
    if: always() && (needs.tag_version.outputs.should_release == 'true' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write # Permission for creating the release
    steps:
      - name: Determine tag name
        id: get_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "Using tag from event: ${{ github.ref_name }}"
            echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "Using tag from previous job: ${{ needs.tag_version.outputs.tag_name }}"
            echo "tag=${{ needs.tag_version.outputs.tag_name }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_tag.outputs.tag }} # Checkout the determined tag

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view ${{ steps.get_tag.outputs.tag }} > /dev/null 2>&1; then
            echo "Release for tag ${{ steps.get_tag.outputs.tag }} already exists. Skipping publish and release steps."
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Release for tag ${{ steps.get_tag.outputs.tag }} does not exist. Proceeding."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        if: steps.check_release.outputs.exists == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          body_path: README.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}